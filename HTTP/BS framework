# B/S 架构 《javaweb技术内幕》
平台 框架 业务逻辑 分离

硅谷程序员效率是国内的10倍？
如何提高工作效率，让自己专业，让自己更加值钱。
python写自动化脚本和系统管理；
emacs的使用。
《程序员修炼之道：从小工到专家》

在服务器端实际上还有很复杂的业务逻辑：服务器可能有很多台，到底指定
哪台服务器来处理请求，这需要一个负载均衡设备来平均分配所有用户的请求；
还有请求的数据是存储在分布式缓存里还是一个静态文件里，或是在数据库里；

当数据返回浏览器时，浏览器解析数据发现还有一些静态资源（如CSS，JS或者图片）时又会
发起另外的HTTP请求，而这些请求很可能会在CDN上，那么CDN服务器又会处理这个用户的请求，
大体上一个用户请求会涉及这么多的操作。

# 发起一个HTTP请求
1 能不能自己组装一个符合HTTP的数据包；
2 处理浏览器还有哪些方式也能简单地发起一个HTTP请求？
***
更深入地，网络编程。
如何写一个浏览器，如何写一个服务器？
***
浏览器在建立Socket连接之前，必须根据地址栏里输入的URL的域名DNS解析出IP地址，再根据
这个IP地址和默认的80端口与远程服务器建立Socket连接，然后浏览器根据这个URL组装成
一个get类型的HTTP请求头，通过outputStream.write发送到目标服务器，服务器等待
inputStream.read返回数据，最后断开这个连接。

当然，不同浏览器在如何使用这个已经建立好的连接以及根据什么规则来管理连接上，有不同的
实现方法。
一句话，发起一个HTTP请求的过程就是建立一个Socket通信的过程。

HTTP Header
它控制着用户浏览器的渲染行为和服务器的执行逻辑。
https://en.wikipedia.org/wiki/List_of_HTTP_header_fields

# 浏览器缓存机制
服务器前端部署一个缓存服务器，如Varnish代理。
为保证用户能够看到最新数据，必须通过HTTP来控制。

一般服务端在响应头中返回一个Last-Modified字段，告诉浏览器这个页面的最后修改时间，
浏览器再次请求时在请求头中增加一个If-Modified-Since字段，询问当前缓存的页面是
最新的，如果是就返回304状态码，告诉浏览器是最新的，服务器也不会传输新的数据。

# DNS域名解析
1 先查看浏览器缓存
2 查看操作系统缓存
C:\Windows\System32\drivers\etc\hosts
3 DNS服务器（LDNS）
在我们的网络配置中都会有“DNS服务器地址”这一项。
windows中使用 ipconfig命令查看
4 Root Server

# 跟踪域名解析过程
nslookup

# 清除缓存的域名

1.5 CDN工作机制
Content Delivery Network(内容分布网络)
目前CDN都以缓存网站中的静态数据为主，如CSS JS 图片和静态页面等数据。
用户在从主站服务器请求到动态内容后，再从CDN上下载这些静态数据。

# 1.5.2负载均衡

# 1.5.3CDN动态加速


