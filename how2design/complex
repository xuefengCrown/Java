# 设计复杂的程序
12 ．1 设计复杂的程序
设计程序时，总是希望只用一个函数就可以实现目标，但往往需要辅助函数的使用。特别，如果问题
描述涉及多种依赖关系，自然的方法是一个函数表示一种依赖关系，由此可以方便地阅读你的程序。

另外，按照设计诀窍，设计程序应该从严格分析输入和输出之间的关系开始。根据数据分析结果，先
设计一个模板，然后进一步完善，最后得到完整的函数定义。从模板得到完整的函数定义意味着需要把模
板中的表达式联系起来以组成问题的解答。这样做的时候，可能会遇到如下几种情况：

如果问题的解答需要对某个变量的值进行分析，那么使用 cond 表达式；

如果计算需要用到某个特定领域的知识，例如，绘图、会计、音乐等学科知识，那么使用辅助函数；

如果某个计算必须处理表，自然数或是其他任意大的数据，那么使用辅助函数；

如果函数的自然形态不是我们所期望的表达式，它很有可能就是程序目标的一般形式。在这种情况下，
主函数是一个简短的定义，而计算由一般化的辅助函数完成。
后两种情况我们还没有讨论过，本章前两节就使用两个例子对其进行说明。
当决定使用辅助函数时，应该把函数的合约、头部和用途说明加入到函数的清单中。

维护一张函数清单！

把函数加入函数清单之前，先要检查是否已经存在相似的函数，或是清单中已经有了类似的函数说明。
Scheme 提供了多种基本操作和函数，我们应该尽可能加以利用。

按照上述方针，我们逐一开发所需的函数，如果所设计的函数不依赖于清单中的其他函数，就可以进
行测试，一旦完成了基本函数的测试，就可以测试其他的（调用基本函数的）函数，直到清单中的所有函
数都被测试为止。我们应该在测试一个函数之前严格测试被它调用的其他函数，这样可以减少此后逻辑错
误的定位时间。

********************************************
下面就是排序函数的合约和用途说明：
;; sort : list-of-numbers  -> list-of-numbers
;; 使用表 alon 中的数，创建有序表
(define (sort alon) ...)

接着是两个例子：
(sort empty)
;; 预期值：
empty
(sort (cons 1297.04 (cons 20000.00 (cons -505.25 empty))))
;; 预期值：
(cons 20000.00 (cons 1297.04 (cons -505.25 empty)))
empty 不包含任何元素，可以认为是有序的，因此对应的输出是 empty。

下一步是把数据定义转变为函数模板。前面已经处理过数表，所以这一步很简单：
(define (sort alon)
(cond
[(empty? alon) ...]
[else ... (first alon) ... (sort (rest alon)) ...]))

有了这个模板，下面就来处理程序最有意义的部分。
********************************************

